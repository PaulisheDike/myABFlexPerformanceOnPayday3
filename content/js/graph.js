/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1416.0, "minX": 0.0, "maxY": 62670.0, "series": [{"data": [[0.0, 1416.0], [0.1, 2036.0], [0.2, 2037.0], [0.3, 2037.0], [0.4, 2040.0], [0.5, 2040.0], [0.6, 2041.0], [0.7, 2042.0], [0.8, 2042.0], [0.9, 2042.0], [1.0, 2043.0], [1.1, 2043.0], [1.2, 2043.0], [1.3, 2043.0], [1.4, 2043.0], [1.5, 2044.0], [1.6, 2044.0], [1.7, 2044.0], [1.8, 2044.0], [1.9, 2045.0], [2.0, 2045.0], [2.1, 2045.0], [2.2, 2046.0], [2.3, 2046.0], [2.4, 2046.0], [2.5, 2046.0], [2.6, 2046.0], [2.7, 2047.0], [2.8, 2047.0], [2.9, 2047.0], [3.0, 2047.0], [3.1, 2047.0], [3.2, 2048.0], [3.3, 2048.0], [3.4, 2048.0], [3.5, 2048.0], [3.6, 2048.0], [3.7, 2048.0], [3.8, 2048.0], [3.9, 2048.0], [4.0, 2049.0], [4.1, 2049.0], [4.2, 2049.0], [4.3, 2049.0], [4.4, 2049.0], [4.5, 2049.0], [4.6, 2050.0], [4.7, 2050.0], [4.8, 2050.0], [4.9, 2050.0], [5.0, 2050.0], [5.1, 2050.0], [5.2, 2050.0], [5.3, 2051.0], [5.4, 2051.0], [5.5, 2051.0], [5.6, 2051.0], [5.7, 2051.0], [5.8, 2051.0], [5.9, 2052.0], [6.0, 2052.0], [6.1, 2052.0], [6.2, 2052.0], [6.3, 2052.0], [6.4, 2052.0], [6.5, 2053.0], [6.6, 2053.0], [6.7, 2053.0], [6.8, 2053.0], [6.9, 2053.0], [7.0, 2053.0], [7.1, 2053.0], [7.2, 2054.0], [7.3, 2054.0], [7.4, 2054.0], [7.5, 2054.0], [7.6, 2054.0], [7.7, 2054.0], [7.8, 2054.0], [7.9, 2054.0], [8.0, 2054.0], [8.1, 2054.0], [8.2, 2055.0], [8.3, 2055.0], [8.4, 2055.0], [8.5, 2055.0], [8.6, 2055.0], [8.7, 2055.0], [8.8, 2055.0], [8.9, 2055.0], [9.0, 2055.0], [9.1, 2056.0], [9.2, 2056.0], [9.3, 2056.0], [9.4, 2056.0], [9.5, 2056.0], [9.6, 2056.0], [9.7, 2056.0], [9.8, 2056.0], [9.9, 2056.0], [10.0, 2056.0], [10.1, 2057.0], [10.2, 2057.0], [10.3, 2057.0], [10.4, 2057.0], [10.5, 2057.0], [10.6, 2057.0], [10.7, 2057.0], [10.8, 2057.0], [10.9, 2057.0], [11.0, 2058.0], [11.1, 2058.0], [11.2, 2058.0], [11.3, 2058.0], [11.4, 2058.0], [11.5, 2059.0], [11.6, 2059.0], [11.7, 2059.0], [11.8, 2059.0], [11.9, 2059.0], [12.0, 2059.0], [12.1, 2059.0], [12.2, 2059.0], [12.3, 2059.0], [12.4, 2060.0], [12.5, 2060.0], [12.6, 2061.0], [12.7, 2061.0], [12.8, 2061.0], [12.9, 2061.0], [13.0, 2061.0], [13.1, 2062.0], [13.2, 2062.0], [13.3, 2062.0], [13.4, 2062.0], [13.5, 2062.0], [13.6, 2062.0], [13.7, 2062.0], [13.8, 2063.0], [13.9, 2063.0], [14.0, 2063.0], [14.1, 2063.0], [14.2, 2063.0], [14.3, 2064.0], [14.4, 2064.0], [14.5, 2064.0], [14.6, 2064.0], [14.7, 2064.0], [14.8, 2065.0], [14.9, 2065.0], [15.0, 2065.0], [15.1, 2065.0], [15.2, 2065.0], [15.3, 2065.0], [15.4, 2065.0], [15.5, 2066.0], [15.6, 2066.0], [15.7, 2067.0], [15.8, 2067.0], [15.9, 2067.0], [16.0, 2067.0], [16.1, 2067.0], [16.2, 2068.0], [16.3, 2068.0], [16.4, 2068.0], [16.5, 2068.0], [16.6, 2068.0], [16.7, 2069.0], [16.8, 2069.0], [16.9, 2069.0], [17.0, 2069.0], [17.1, 2069.0], [17.2, 2070.0], [17.3, 2070.0], [17.4, 2070.0], [17.5, 2071.0], [17.6, 2071.0], [17.7, 2071.0], [17.8, 2072.0], [17.9, 2073.0], [18.0, 2073.0], [18.1, 2073.0], [18.2, 2073.0], [18.3, 2074.0], [18.4, 2074.0], [18.5, 2074.0], [18.6, 2074.0], [18.7, 2075.0], [18.8, 2075.0], [18.9, 2076.0], [19.0, 2076.0], [19.1, 2077.0], [19.2, 2077.0], [19.3, 2078.0], [19.4, 2079.0], [19.5, 2080.0], [19.6, 2081.0], [19.7, 2081.0], [19.8, 2082.0], [19.9, 2082.0], [20.0, 2083.0], [20.1, 2085.0], [20.2, 2086.0], [20.3, 2086.0], [20.4, 2089.0], [20.5, 2089.0], [20.6, 2091.0], [20.7, 2094.0], [20.8, 2101.0], [20.9, 2102.0], [21.0, 2562.0], [21.1, 10614.0], [21.2, 12291.0], [21.3, 13204.0], [21.4, 13607.0], [21.5, 14199.0], [21.6, 15349.0], [21.7, 15620.0], [21.8, 16033.0], [21.9, 16939.0], [22.0, 17783.0], [22.1, 18094.0], [22.2, 18401.0], [22.3, 18492.0], [22.4, 18997.0], [22.5, 19383.0], [22.6, 19514.0], [22.7, 20331.0], [22.8, 20575.0], [22.9, 20680.0], [23.0, 20828.0], [23.1, 20998.0], [23.2, 21037.0], [23.3, 21230.0], [23.4, 21374.0], [23.5, 21586.0], [23.6, 21607.0], [23.7, 21703.0], [23.8, 22019.0], [23.9, 22072.0], [24.0, 22201.0], [24.1, 22284.0], [24.2, 22372.0], [24.3, 22411.0], [24.4, 22463.0], [24.5, 22522.0], [24.6, 22730.0], [24.7, 22766.0], [24.8, 22862.0], [24.9, 23047.0], [25.0, 23107.0], [25.1, 23242.0], [25.2, 23312.0], [25.3, 23406.0], [25.4, 23566.0], [25.5, 23706.0], [25.6, 23813.0], [25.7, 23886.0], [25.8, 23997.0], [25.9, 24046.0], [26.0, 24292.0], [26.1, 24469.0], [26.2, 24861.0], [26.3, 25171.0], [26.4, 25247.0], [26.5, 25478.0], [26.6, 25738.0], [26.7, 25822.0], [26.8, 26029.0], [26.9, 26138.0], [27.0, 26448.0], [27.1, 26519.0], [27.2, 26551.0], [27.3, 27141.0], [27.4, 27432.0], [27.5, 27556.0], [27.6, 27822.0], [27.7, 28212.0], [27.8, 28661.0], [27.9, 29697.0], [28.0, 29807.0], [28.1, 30066.0], [28.2, 30128.0], [28.3, 30494.0], [28.4, 30573.0], [28.5, 30715.0], [28.6, 30820.0], [28.7, 30965.0], [28.8, 31018.0], [28.9, 31042.0], [29.0, 31092.0], [29.1, 31360.0], [29.2, 31506.0], [29.3, 31746.0], [29.4, 31967.0], [29.5, 32081.0], [29.6, 32082.0], [29.7, 32162.0], [29.8, 32255.0], [29.9, 32293.0], [30.0, 32339.0], [30.1, 32489.0], [30.2, 32723.0], [30.3, 32802.0], [30.4, 32870.0], [30.5, 32944.0], [30.6, 33021.0], [30.7, 33101.0], [30.8, 33119.0], [30.9, 33144.0], [31.0, 33264.0], [31.1, 33296.0], [31.2, 33491.0], [31.3, 33632.0], [31.4, 33661.0], [31.5, 33698.0], [31.6, 33866.0], [31.7, 34015.0], [31.8, 34158.0], [31.9, 34226.0], [32.0, 34285.0], [32.1, 34342.0], [32.2, 34387.0], [32.3, 34461.0], [32.4, 34599.0], [32.5, 34661.0], [32.6, 34774.0], [32.7, 34792.0], [32.8, 34953.0], [32.9, 35044.0], [33.0, 35062.0], [33.1, 35245.0], [33.2, 35309.0], [33.3, 35349.0], [33.4, 35405.0], [33.5, 35594.0], [33.6, 35840.0], [33.7, 35967.0], [33.8, 36065.0], [33.9, 36071.0], [34.0, 36108.0], [34.1, 36196.0], [34.2, 36612.0], [34.3, 36699.0], [34.4, 36935.0], [34.5, 36968.0], [34.6, 37114.0], [34.7, 37245.0], [34.8, 37479.0], [34.9, 37770.0], [35.0, 37906.0], [35.1, 38178.0], [35.2, 38447.0], [35.3, 38469.0], [35.4, 38531.0], [35.5, 38824.0], [35.6, 39085.0], [35.7, 39185.0], [35.8, 39238.0], [35.9, 39360.0], [36.0, 39377.0], [36.1, 39453.0], [36.2, 39833.0], [36.3, 40071.0], [36.4, 40258.0], [36.5, 40267.0], [36.6, 40339.0], [36.7, 40368.0], [36.8, 40531.0], [36.9, 40586.0], [37.0, 40661.0], [37.1, 40939.0], [37.2, 40986.0], [37.3, 41033.0], [37.4, 41074.0], [37.5, 41099.0], [37.6, 41214.0], [37.7, 41381.0], [37.8, 41591.0], [37.9, 41677.0], [38.0, 42132.0], [38.1, 42176.0], [38.2, 42227.0], [38.3, 42280.0], [38.4, 42362.0], [38.5, 42502.0], [38.6, 42699.0], [38.7, 42805.0], [38.8, 42872.0], [38.9, 42943.0], [39.0, 42985.0], [39.1, 43163.0], [39.2, 43286.0], [39.3, 43419.0], [39.4, 43524.0], [39.5, 43748.0], [39.6, 43953.0], [39.7, 44027.0], [39.8, 44155.0], [39.9, 44365.0], [40.0, 44371.0], [40.1, 44429.0], [40.2, 44472.0], [40.3, 44572.0], [40.4, 44655.0], [40.5, 44695.0], [40.6, 44725.0], [40.7, 44810.0], [40.8, 44832.0], [40.9, 44922.0], [41.0, 45020.0], [41.1, 45075.0], [41.2, 45091.0], [41.3, 45112.0], [41.4, 45136.0], [41.5, 45167.0], [41.6, 45200.0], [41.7, 45271.0], [41.8, 45308.0], [41.9, 45422.0], [42.0, 45428.0], [42.1, 45458.0], [42.2, 45508.0], [42.3, 45587.0], [42.4, 45630.0], [42.5, 45688.0], [42.6, 45735.0], [42.7, 45753.0], [42.8, 45795.0], [42.9, 45846.0], [43.0, 45892.0], [43.1, 45975.0], [43.2, 46036.0], [43.3, 46072.0], [43.4, 46152.0], [43.5, 46172.0], [43.6, 46238.0], [43.7, 46282.0], [43.8, 46290.0], [43.9, 46334.0], [44.0, 46436.0], [44.1, 46458.0], [44.2, 46480.0], [44.3, 46497.0], [44.4, 46532.0], [44.5, 46568.0], [44.6, 46624.0], [44.7, 46688.0], [44.8, 46712.0], [44.9, 46780.0], [45.0, 46844.0], [45.1, 46878.0], [45.2, 46929.0], [45.3, 47062.0], [45.4, 47067.0], [45.5, 47133.0], [45.6, 47264.0], [45.7, 47403.0], [45.8, 47438.0], [45.9, 47462.0], [46.0, 47494.0], [46.1, 47512.0], [46.2, 47590.0], [46.3, 47705.0], [46.4, 47752.0], [46.5, 47765.0], [46.6, 47793.0], [46.7, 47913.0], [46.8, 47935.0], [46.9, 47985.0], [47.0, 48041.0], [47.1, 48118.0], [47.2, 48158.0], [47.3, 48181.0], [47.4, 48222.0], [47.5, 48244.0], [47.6, 48281.0], [47.7, 48300.0], [47.8, 48433.0], [47.9, 48522.0], [48.0, 48547.0], [48.1, 48566.0], [48.2, 48613.0], [48.3, 48641.0], [48.4, 48698.0], [48.5, 48709.0], [48.6, 48735.0], [48.7, 48790.0], [48.8, 48810.0], [48.9, 48871.0], [49.0, 48872.0], [49.1, 48891.0], [49.2, 48947.0], [49.3, 48967.0], [49.4, 48976.0], [49.5, 48994.0], [49.6, 49023.0], [49.7, 49028.0], [49.8, 49050.0], [49.9, 49102.0], [50.0, 49114.0], [50.1, 49124.0], [50.2, 49157.0], [50.3, 49196.0], [50.4, 49207.0], [50.5, 49242.0], [50.6, 49252.0], [50.7, 49285.0], [50.8, 49319.0], [50.9, 49362.0], [51.0, 49389.0], [51.1, 49400.0], [51.2, 49418.0], [51.3, 49429.0], [51.4, 49444.0], [51.5, 49559.0], [51.6, 49604.0], [51.7, 49614.0], [51.8, 49646.0], [51.9, 49660.0], [52.0, 49681.0], [52.1, 49695.0], [52.2, 49721.0], [52.3, 49763.0], [52.4, 49798.0], [52.5, 49835.0], [52.6, 49856.0], [52.7, 49907.0], [52.8, 49923.0], [52.9, 49928.0], [53.0, 49959.0], [53.1, 49973.0], [53.2, 49990.0], [53.3, 50004.0], [53.4, 50033.0], [53.5, 50046.0], [53.6, 50067.0], [53.7, 50075.0], [53.8, 50112.0], [53.9, 50125.0], [54.0, 50167.0], [54.1, 50218.0], [54.2, 50238.0], [54.3, 50285.0], [54.4, 50297.0], [54.5, 50323.0], [54.6, 50349.0], [54.7, 50361.0], [54.8, 50382.0], [54.9, 50391.0], [55.0, 50399.0], [55.1, 50413.0], [55.2, 50439.0], [55.3, 50446.0], [55.4, 50475.0], [55.5, 50478.0], [55.6, 50510.0], [55.7, 50526.0], [55.8, 50553.0], [55.9, 50564.0], [56.0, 50571.0], [56.1, 50576.0], [56.2, 50609.0], [56.3, 50619.0], [56.4, 50636.0], [56.5, 50649.0], [56.6, 50672.0], [56.7, 50684.0], [56.8, 50696.0], [56.9, 50722.0], [57.0, 50745.0], [57.1, 50758.0], [57.2, 50795.0], [57.3, 50811.0], [57.4, 50839.0], [57.5, 50849.0], [57.6, 50868.0], [57.7, 50887.0], [57.8, 50899.0], [57.9, 50904.0], [58.0, 50912.0], [58.1, 50923.0], [58.2, 50961.0], [58.3, 50975.0], [58.4, 50986.0], [58.5, 51005.0], [58.6, 51022.0], [58.7, 51060.0], [58.8, 51075.0], [58.9, 51080.0], [59.0, 51083.0], [59.1, 51116.0], [59.2, 51139.0], [59.3, 51149.0], [59.4, 51211.0], [59.5, 51228.0], [59.6, 51238.0], [59.7, 51252.0], [59.8, 51284.0], [59.9, 51303.0], [60.0, 51316.0], [60.1, 51320.0], [60.2, 51337.0], [60.3, 51354.0], [60.4, 51367.0], [60.5, 51380.0], [60.6, 51404.0], [60.7, 51421.0], [60.8, 51430.0], [60.9, 51438.0], [61.0, 51449.0], [61.1, 51452.0], [61.2, 51461.0], [61.3, 51485.0], [61.4, 51496.0], [61.5, 51549.0], [61.6, 51559.0], [61.7, 51592.0], [61.8, 51599.0], [61.9, 51626.0], [62.0, 51632.0], [62.1, 51637.0], [62.2, 51649.0], [62.3, 51683.0], [62.4, 51725.0], [62.5, 51754.0], [62.6, 51756.0], [62.7, 51759.0], [62.8, 51775.0], [62.9, 51825.0], [63.0, 51828.0], [63.1, 51836.0], [63.2, 51856.0], [63.3, 51858.0], [63.4, 51872.0], [63.5, 51879.0], [63.6, 51900.0], [63.7, 51945.0], [63.8, 51967.0], [63.9, 51992.0], [64.0, 52031.0], [64.1, 52045.0], [64.2, 52060.0], [64.3, 52082.0], [64.4, 52091.0], [64.5, 52112.0], [64.6, 52126.0], [64.7, 52144.0], [64.8, 52156.0], [64.9, 52171.0], [65.0, 52180.0], [65.1, 52193.0], [65.2, 52217.0], [65.3, 52236.0], [65.4, 52256.0], [65.5, 52264.0], [65.6, 52277.0], [65.7, 52303.0], [65.8, 52332.0], [65.9, 52356.0], [66.0, 52362.0], [66.1, 52385.0], [66.2, 52397.0], [66.3, 52403.0], [66.4, 52417.0], [66.5, 52423.0], [66.6, 52432.0], [66.7, 52445.0], [66.8, 52452.0], [66.9, 52472.0], [67.0, 52476.0], [67.1, 52488.0], [67.2, 52491.0], [67.3, 52511.0], [67.4, 52524.0], [67.5, 52529.0], [67.6, 52535.0], [67.7, 52563.0], [67.8, 52582.0], [67.9, 52584.0], [68.0, 52596.0], [68.1, 52601.0], [68.2, 52611.0], [68.3, 52618.0], [68.4, 52634.0], [68.5, 52648.0], [68.6, 52685.0], [68.7, 52704.0], [68.8, 52720.0], [68.9, 52726.0], [69.0, 52743.0], [69.1, 52769.0], [69.2, 52773.0], [69.3, 52793.0], [69.4, 52799.0], [69.5, 52799.0], [69.6, 52819.0], [69.7, 52834.0], [69.8, 52846.0], [69.9, 52851.0], [70.0, 52860.0], [70.1, 52873.0], [70.2, 52878.0], [70.3, 52889.0], [70.4, 52896.0], [70.5, 52914.0], [70.6, 52951.0], [70.7, 52955.0], [70.8, 52985.0], [70.9, 53007.0], [71.0, 53014.0], [71.1, 53021.0], [71.2, 53025.0], [71.3, 53031.0], [71.4, 53039.0], [71.5, 53049.0], [71.6, 53063.0], [71.7, 53075.0], [71.8, 53083.0], [71.9, 53106.0], [72.0, 53111.0], [72.1, 53123.0], [72.2, 53126.0], [72.3, 53139.0], [72.4, 53150.0], [72.5, 53156.0], [72.6, 53161.0], [72.7, 53167.0], [72.8, 53172.0], [72.9, 53196.0], [73.0, 53215.0], [73.1, 53225.0], [73.2, 53238.0], [73.3, 53253.0], [73.4, 53287.0], [73.5, 53292.0], [73.6, 53306.0], [73.7, 53316.0], [73.8, 53336.0], [73.9, 53355.0], [74.0, 53359.0], [74.1, 53369.0], [74.2, 53382.0], [74.3, 53386.0], [74.4, 53390.0], [74.5, 53395.0], [74.6, 53402.0], [74.7, 53418.0], [74.8, 53423.0], [74.9, 53429.0], [75.0, 53433.0], [75.1, 53442.0], [75.2, 53452.0], [75.3, 53453.0], [75.4, 53488.0], [75.5, 53501.0], [75.6, 53512.0], [75.7, 53541.0], [75.8, 53557.0], [75.9, 53578.0], [76.0, 53592.0], [76.1, 53606.0], [76.2, 53616.0], [76.3, 53621.0], [76.4, 53641.0], [76.5, 53647.0], [76.6, 53653.0], [76.7, 53660.0], [76.8, 53675.0], [76.9, 53681.0], [77.0, 53695.0], [77.1, 53703.0], [77.2, 53706.0], [77.3, 53714.0], [77.4, 53726.0], [77.5, 53740.0], [77.6, 53762.0], [77.7, 53778.0], [77.8, 53783.0], [77.9, 53796.0], [78.0, 53802.0], [78.1, 53835.0], [78.2, 53838.0], [78.3, 53846.0], [78.4, 53853.0], [78.5, 53860.0], [78.6, 53864.0], [78.7, 53878.0], [78.8, 53891.0], [78.9, 53923.0], [79.0, 53925.0], [79.1, 53930.0], [79.2, 53944.0], [79.3, 53961.0], [79.4, 53986.0], [79.5, 53987.0], [79.6, 53995.0], [79.7, 53996.0], [79.8, 54011.0], [79.9, 54026.0], [80.0, 54039.0], [80.1, 54060.0], [80.2, 54062.0], [80.3, 54087.0], [80.4, 54093.0], [80.5, 54105.0], [80.6, 54112.0], [80.7, 54118.0], [80.8, 54136.0], [80.9, 54143.0], [81.0, 54166.0], [81.1, 54175.0], [81.2, 54183.0], [81.3, 54197.0], [81.4, 54218.0], [81.5, 54241.0], [81.6, 54244.0], [81.7, 54266.0], [81.8, 54272.0], [81.9, 54289.0], [82.0, 54310.0], [82.1, 54322.0], [82.2, 54329.0], [82.3, 54348.0], [82.4, 54357.0], [82.5, 54359.0], [82.6, 54363.0], [82.7, 54369.0], [82.8, 54421.0], [82.9, 54456.0], [83.0, 54464.0], [83.1, 54502.0], [83.2, 54507.0], [83.3, 54520.0], [83.4, 54542.0], [83.5, 54566.0], [83.6, 54580.0], [83.7, 54596.0], [83.8, 54622.0], [83.9, 54641.0], [84.0, 54653.0], [84.1, 54666.0], [84.2, 54675.0], [84.3, 54702.0], [84.4, 54721.0], [84.5, 54758.0], [84.6, 54787.0], [84.7, 54828.0], [84.8, 54834.0], [84.9, 54858.0], [85.0, 54865.0], [85.1, 54921.0], [85.2, 54950.0], [85.3, 54966.0], [85.4, 54982.0], [85.5, 54993.0], [85.6, 55008.0], [85.7, 55011.0], [85.8, 55025.0], [85.9, 55050.0], [86.0, 55058.0], [86.1, 55062.0], [86.2, 55069.0], [86.3, 55081.0], [86.4, 55085.0], [86.5, 55109.0], [86.6, 55127.0], [86.7, 55161.0], [86.8, 55189.0], [86.9, 55197.0], [87.0, 55200.0], [87.1, 55267.0], [87.2, 55287.0], [87.3, 55304.0], [87.4, 55320.0], [87.5, 55334.0], [87.6, 55391.0], [87.7, 55422.0], [87.8, 55453.0], [87.9, 55462.0], [88.0, 55488.0], [88.1, 55520.0], [88.2, 55531.0], [88.3, 55547.0], [88.4, 55567.0], [88.5, 55588.0], [88.6, 55593.0], [88.7, 55618.0], [88.8, 55622.0], [88.9, 55634.0], [89.0, 55664.0], [89.1, 55695.0], [89.2, 55711.0], [89.3, 55813.0], [89.4, 55823.0], [89.5, 55839.0], [89.6, 55848.0], [89.7, 55863.0], [89.8, 55877.0], [89.9, 55897.0], [90.0, 56022.0], [90.1, 56054.0], [90.2, 56067.0], [90.3, 56076.0], [90.4, 56121.0], [90.5, 56162.0], [90.6, 56205.0], [90.7, 56275.0], [90.8, 56332.0], [90.9, 56359.0], [91.0, 56377.0], [91.1, 56399.0], [91.2, 56427.0], [91.3, 56432.0], [91.4, 56470.0], [91.5, 56485.0], [91.6, 56489.0], [91.7, 56537.0], [91.8, 56538.0], [91.9, 56554.0], [92.0, 56587.0], [92.1, 56619.0], [92.2, 56643.0], [92.3, 56662.0], [92.4, 56708.0], [92.5, 56755.0], [92.6, 56803.0], [92.7, 56834.0], [92.8, 56836.0], [92.9, 56839.0], [93.0, 56909.0], [93.1, 56935.0], [93.2, 56958.0], [93.3, 56973.0], [93.4, 56991.0], [93.5, 57044.0], [93.6, 57076.0], [93.7, 57085.0], [93.8, 57098.0], [93.9, 57122.0], [94.0, 57156.0], [94.1, 57197.0], [94.2, 57217.0], [94.3, 57241.0], [94.4, 57287.0], [94.5, 57313.0], [94.6, 57374.0], [94.7, 57413.0], [94.8, 57519.0], [94.9, 57569.0], [95.0, 57592.0], [95.1, 57674.0], [95.2, 57743.0], [95.3, 57785.0], [95.4, 57868.0], [95.5, 57903.0], [95.6, 57982.0], [95.7, 58089.0], [95.8, 58178.0], [95.9, 58187.0], [96.0, 58240.0], [96.1, 58312.0], [96.2, 58325.0], [96.3, 58405.0], [96.4, 58476.0], [96.5, 58534.0], [96.6, 58577.0], [96.7, 58594.0], [96.8, 58619.0], [96.9, 58632.0], [97.0, 58719.0], [97.1, 58754.0], [97.2, 58762.0], [97.3, 58843.0], [97.4, 58958.0], [97.5, 59024.0], [97.6, 59049.0], [97.7, 59141.0], [97.8, 59156.0], [97.9, 59180.0], [98.0, 59238.0], [98.1, 59251.0], [98.2, 59311.0], [98.3, 59363.0], [98.4, 59527.0], [98.5, 59543.0], [98.6, 59750.0], [98.7, 59777.0], [98.8, 59821.0], [98.9, 59855.0], [99.0, 59891.0], [99.1, 60200.0], [99.2, 60513.0], [99.3, 61006.0], [99.4, 61322.0], [99.5, 61367.0], [99.6, 61596.0], [99.7, 61692.0], [99.8, 62069.0], [99.9, 62659.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1400.0, "maxY": 414.0, "series": [{"data": [[33700.0, 1.0], [34100.0, 3.0], [32900.0, 1.0], [34500.0, 2.0], [35300.0, 4.0], [34900.0, 2.0], [36100.0, 3.0], [35700.0, 1.0], [36900.0, 3.0], [37300.0, 1.0], [37700.0, 2.0], [38100.0, 1.0], [38500.0, 1.0], [38900.0, 1.0], [40500.0, 3.0], [39300.0, 4.0], [40900.0, 3.0], [39700.0, 1.0], [40100.0, 1.0], [41700.0, 1.0], [41300.0, 2.0], [42100.0, 4.0], [42900.0, 3.0], [42500.0, 1.0], [43300.0, 1.0], [44100.0, 2.0], [43700.0, 2.0], [44500.0, 2.0], [44900.0, 3.0], [45300.0, 2.0], [45700.0, 6.0], [46500.0, 5.0], [46100.0, 3.0], [46900.0, 2.0], [47300.0, 1.0], [47700.0, 8.0], [48100.0, 6.0], [48500.0, 5.0], [48900.0, 8.0], [49700.0, 6.0], [50500.0, 11.0], [50100.0, 7.0], [49300.0, 7.0], [50900.0, 13.0], [52500.0, 16.0], [51700.0, 10.0], [51300.0, 14.0], [52100.0, 14.0], [52900.0, 9.0], [54900.0, 10.0], [53700.0, 17.0], [54100.0, 18.0], [54500.0, 13.0], [53300.0, 19.0], [55300.0, 7.0], [55700.0, 2.0], [56500.0, 9.0], [56100.0, 4.0], [57300.0, 5.0], [56900.0, 10.0], [57700.0, 3.0], [58500.0, 6.0], [58100.0, 4.0], [58900.0, 2.0], [59300.0, 3.0], [60500.0, 1.0], [59700.0, 3.0], [61300.0, 3.0], [1400.0, 2.0], [2000.0, 414.0], [2100.0, 4.0], [2500.0, 1.0], [8500.0, 1.0], [10600.0, 1.0], [12200.0, 1.0], [13000.0, 1.0], [13200.0, 1.0], [13600.0, 2.0], [13400.0, 1.0], [14100.0, 1.0], [14700.0, 1.0], [15300.0, 1.0], [15500.0, 1.0], [15700.0, 1.0], [15600.0, 1.0], [16000.0, 1.0], [16800.0, 1.0], [17400.0, 1.0], [18000.0, 2.0], [18400.0, 3.0], [19200.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [20600.0, 3.0], [20800.0, 1.0], [21000.0, 2.0], [21200.0, 2.0], [21400.0, 1.0], [22400.0, 4.0], [21600.0, 3.0], [22200.0, 3.0], [22000.0, 3.0], [23400.0, 1.0], [23000.0, 1.0], [22600.0, 1.0], [22800.0, 3.0], [23200.0, 2.0], [23800.0, 3.0], [24400.0, 1.0], [24000.0, 2.0], [23600.0, 1.0], [24200.0, 1.0], [25200.0, 2.0], [24600.0, 1.0], [25400.0, 1.0], [24800.0, 1.0], [25800.0, 2.0], [26400.0, 2.0], [26000.0, 2.0], [27200.0, 1.0], [27400.0, 1.0], [26800.0, 1.0], [28200.0, 1.0], [28600.0, 2.0], [27800.0, 1.0], [29600.0, 2.0], [30000.0, 2.0], [30400.0, 2.0], [29800.0, 1.0], [30800.0, 1.0], [31000.0, 6.0], [31400.0, 1.0], [32000.0, 5.0], [32200.0, 5.0], [32400.0, 2.0], [34400.0, 1.0], [32800.0, 5.0], [34000.0, 1.0], [33200.0, 4.0], [33600.0, 5.0], [34800.0, 1.0], [35200.0, 2.0], [36000.0, 4.0], [36800.0, 1.0], [37200.0, 1.0], [38400.0, 4.0], [38000.0, 1.0], [38800.0, 1.0], [39200.0, 2.0], [40000.0, 1.0], [40400.0, 1.0], [40800.0, 1.0], [41600.0, 2.0], [41200.0, 1.0], [42800.0, 5.0], [42400.0, 1.0], [43200.0, 2.0], [44400.0, 4.0], [44000.0, 1.0], [44800.0, 3.0], [46800.0, 5.0], [45600.0, 3.0], [46400.0, 8.0], [45200.0, 4.0], [46000.0, 5.0], [47200.0, 2.0], [48800.0, 7.0], [48000.0, 3.0], [48400.0, 2.0], [49200.0, 7.0], [49600.0, 11.0], [50000.0, 9.0], [50400.0, 11.0], [50800.0, 12.0], [52400.0, 20.0], [53200.0, 13.0], [51600.0, 10.0], [52000.0, 11.0], [52800.0, 17.0], [51200.0, 11.0], [54800.0, 8.0], [53600.0, 20.0], [54000.0, 15.0], [54400.0, 7.0], [55200.0, 6.0], [56400.0, 10.0], [55600.0, 10.0], [56000.0, 9.0], [56800.0, 8.0], [57200.0, 6.0], [57600.0, 3.0], [58000.0, 2.0], [59200.0, 5.0], [58400.0, 3.0], [58800.0, 1.0], [60800.0, 1.0], [59600.0, 1.0], [62400.0, 1.0], [62000.0, 1.0], [61600.0, 2.0], [33100.0, 5.0], [33500.0, 1.0], [34700.0, 3.0], [34300.0, 5.0], [33900.0, 1.0], [35900.0, 2.0], [35500.0, 1.0], [37100.0, 3.0], [37900.0, 1.0], [40300.0, 4.0], [39900.0, 1.0], [39100.0, 2.0], [42300.0, 2.0], [41500.0, 1.0], [41100.0, 1.0], [43500.0, 2.0], [43100.0, 2.0], [44300.0, 3.0], [43900.0, 3.0], [44700.0, 3.0], [46700.0, 4.0], [45500.0, 4.0], [45100.0, 7.0], [45900.0, 2.0], [47100.0, 1.0], [46300.0, 1.0], [47500.0, 4.0], [47900.0, 5.0], [48700.0, 7.0], [49100.0, 10.0], [48300.0, 2.0], [49500.0, 3.0], [49900.0, 12.0], [50300.0, 12.0], [51100.0, 6.0], [50700.0, 8.0], [51500.0, 7.0], [52700.0, 18.0], [51900.0, 7.0], [52300.0, 12.0], [53100.0, 22.0], [54300.0, 16.0], [53900.0, 18.0], [55100.0, 11.0], [54700.0, 7.0], [53500.0, 12.0], [55500.0, 12.0], [57100.0, 6.0], [56700.0, 5.0], [56300.0, 7.0], [58300.0, 4.0], [59100.0, 6.0], [57500.0, 5.0], [57900.0, 3.0], [58700.0, 6.0], [59500.0, 3.0], [61100.0, 1.0], [61500.0, 2.0], [16900.0, 1.0], [18300.0, 1.0], [17700.0, 1.0], [18700.0, 1.0], [19300.0, 2.0], [18900.0, 1.0], [20300.0, 1.0], [19500.0, 1.0], [21100.0, 1.0], [20900.0, 2.0], [20500.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [22300.0, 3.0], [21700.0, 2.0], [22100.0, 1.0], [22500.0, 1.0], [23100.0, 3.0], [22700.0, 3.0], [23500.0, 2.0], [23300.0, 2.0], [23900.0, 2.0], [24300.0, 1.0], [23700.0, 2.0], [24100.0, 1.0], [24900.0, 1.0], [25500.0, 1.0], [25300.0, 1.0], [25100.0, 1.0], [26300.0, 1.0], [26100.0, 1.0], [26500.0, 3.0], [25700.0, 2.0], [27500.0, 2.0], [27100.0, 1.0], [28100.0, 1.0], [27700.0, 1.0], [29300.0, 1.0], [30700.0, 2.0], [30500.0, 3.0], [30100.0, 1.0], [29900.0, 1.0], [30900.0, 2.0], [31500.0, 1.0], [31700.0, 2.0], [31300.0, 1.0], [31100.0, 1.0], [31900.0, 2.0], [32700.0, 2.0], [32100.0, 1.0], [32300.0, 1.0], [33000.0, 3.0], [33400.0, 2.0], [34200.0, 3.0], [33800.0, 1.0], [34600.0, 3.0], [35800.0, 2.0], [36600.0, 3.0], [35000.0, 3.0], [35400.0, 3.0], [36200.0, 1.0], [37000.0, 1.0], [37800.0, 1.0], [37400.0, 1.0], [38600.0, 1.0], [38200.0, 1.0], [40200.0, 3.0], [40600.0, 2.0], [39000.0, 1.0], [39400.0, 2.0], [39800.0, 1.0], [41000.0, 6.0], [41400.0, 1.0], [42200.0, 3.0], [42600.0, 2.0], [43400.0, 1.0], [44200.0, 1.0], [44600.0, 4.0], [45000.0, 5.0], [46200.0, 7.0], [45400.0, 6.0], [45800.0, 4.0], [46600.0, 3.0], [47000.0, 4.0], [47400.0, 7.0], [48600.0, 6.0], [48200.0, 6.0], [49000.0, 7.0], [47800.0, 1.0], [49800.0, 5.0], [51000.0, 11.0], [50600.0, 14.0], [50200.0, 7.0], [49400.0, 7.0], [51400.0, 18.0], [51800.0, 15.0], [52600.0, 12.0], [53000.0, 19.0], [52200.0, 10.0], [53400.0, 19.0], [53800.0, 18.0], [55000.0, 18.0], [54200.0, 11.0], [54600.0, 11.0], [55400.0, 9.0], [56200.0, 4.0], [55800.0, 13.0], [57000.0, 7.0], [56600.0, 5.0], [57400.0, 2.0], [58200.0, 3.0], [57800.0, 3.0], [58600.0, 5.0], [59000.0, 4.0], [59800.0, 7.0], [61000.0, 1.0], [59400.0, 1.0], [60200.0, 2.0], [62600.0, 2.0], [61800.0, 1.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 62600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1579.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1579.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 419.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 142.28070175438597, "minX": 1.69694286E12, "maxY": 254.10909090909095, "series": [{"data": [[1.69694304E12, 252.39506172839506], [1.6969431E12, 254.10909090909095], [1.69694292E12, 244.9329608938548], [1.69694298E12, 253.09158415841597], [1.69694286E12, 156.10429447852758], [1.69694316E12, 142.28070175438597]], "isOverall": false, "label": "Performance Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69694316E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2067.0, "minX": 1.0, "maxY": 62670.0, "series": [{"data": [[2.0, 54310.0], [3.0, 53540.0], [4.0, 53070.0], [5.0, 53647.0], [6.0, 52878.0], [7.0, 53139.0], [8.0, 53707.0], [10.0, 27481.5], [11.0, 54241.0], [12.0, 54369.0], [13.0, 55391.0], [14.0, 54613.0], [15.0, 54435.0], [16.0, 54714.0], [17.0, 54993.0], [18.0, 54819.0], [19.0, 29046.5], [20.0, 56710.0], [21.0, 55637.0], [22.0, 56213.0], [23.0, 54363.0], [24.0, 55839.0], [25.0, 55069.0], [26.0, 55200.0], [27.0, 55622.0], [28.0, 57241.0], [29.0, 58107.0], [30.0, 56399.0], [31.0, 55624.0], [33.0, 56470.0], [32.0, 57542.0], [35.0, 57287.0], [34.0, 58240.0], [37.0, 55863.0], [36.0, 57084.0], [39.0, 55593.0], [38.0, 57627.0], [41.0, 57217.0], [40.0, 56388.0], [43.0, 56054.0], [42.0, 56538.0], [45.0, 57569.0], [44.0, 57969.0], [47.0, 57896.0], [46.0, 57519.0], [49.0, 56834.0], [48.0, 56427.0], [51.0, 56835.0], [50.0, 56963.0], [53.0, 56932.0], [52.0, 56359.0], [55.0, 57812.0], [54.0, 56985.0], [57.0, 34231.5], [56.0, 56838.0], [59.0, 58187.0], [58.0, 55813.0], [61.0, 56640.0], [60.0, 57113.0], [66.0, 59141.0], [65.0, 56977.5], [71.0, 58672.0], [70.0, 57197.0], [69.0, 55520.0], [68.0, 58450.5], [75.0, 57068.0], [74.0, 53853.0], [73.0, 58089.0], [72.0, 58755.0], [79.0, 56291.0], [78.0, 55695.0], [77.0, 56940.0], [76.0, 58445.0], [83.0, 57674.0], [82.0, 59815.0], [81.0, 55826.0], [86.0, 33638.0], [87.0, 57122.0], [85.0, 57189.0], [84.0, 55058.0], [91.0, 35495.5], [90.0, 27875.666666666664], [89.0, 58534.0], [88.0, 57076.0], [94.0, 34091.5], [95.0, 56650.0], [93.0, 56839.0], [92.0, 56488.0], [96.0, 34698.0], [97.0, 37565.0], [99.0, 39004.0], [98.0, 53857.0], [100.0, 30186.0], [103.0, 34380.5], [102.0, 39295.5], [101.0, 55177.0], [107.0, 62069.0], [106.0, 52793.0], [105.0, 62670.0], [104.0, 54039.0], [109.0, 31383.666666666664], [110.0, 39049.5], [111.0, 60200.0], [108.0, 59855.0], [112.0, 31519.333333333336], [115.0, 61322.0], [114.0, 52146.0], [113.0, 59777.0], [118.0, 38842.5], [119.0, 31347.333333333336], [117.0, 53021.0], [116.0, 58476.0], [122.0, 39595.0], [123.0, 61596.0], [121.0, 61352.0], [120.0, 59891.0], [127.0, 38601.0], [126.0, 61367.0], [125.0, 58312.0], [124.0, 59238.0], [130.0, 38720.0], [135.0, 58629.0], [134.0, 59311.0], [133.0, 59251.0], [132.0, 59312.0], [131.0, 59000.0], [129.0, 59024.0], [128.0, 59463.0], [140.0, 38744.5], [139.0, 38995.5], [138.0, 46565.0], [143.0, 25324.555555555555], [142.0, 31955.25], [141.0, 40255.0], [136.0, 59157.0], [146.0, 26623.714285714286], [145.0, 28272.333333333332], [144.0, 30094.25], [147.0, 25166.899999999998], [148.0, 39528.5], [149.0, 40044.0], [151.0, 58762.0], [150.0, 58612.0], [152.0, 31405.0], [157.0, 40572.5], [156.0, 40830.0], [155.0, 40764.5], [159.0, 28842.666666666664], [158.0, 31510.0], [154.0, 58632.0], [153.0, 58719.0], [160.0, 28451.5], [161.0, 40469.5], [162.0, 30654.8], [165.0, 31712.75], [164.0, 32040.75], [163.0, 32243.75], [166.0, 30673.2], [167.0, 41341.0], [170.0, 39295.5], [169.0, 39030.5], [172.0, 31549.4], [173.0, 39924.5], [174.0, 37267.333333333336], [175.0, 54578.0], [171.0, 55199.0], [168.0, 55488.0], [179.0, 43765.0], [182.0, 33950.25], [183.0, 32101.0], [181.0, 59180.0], [180.0, 53032.0], [178.0, 59750.0], [177.0, 52278.0], [176.0, 53222.0], [185.0, 34528.5], [184.0, 30819.375], [188.0, 43004.666666666664], [187.0, 37965.333333333336], [189.0, 40931.25], [190.0, 53700.5], [186.0, 44540.0], [191.0, 59846.0], [198.0, 56998.0], [197.0, 57743.0], [196.0, 56587.0], [195.0, 56432.0], [194.0, 58564.0], [193.0, 57868.0], [192.0, 59156.0], [202.0, 43669.0], [204.0, 34693.666666666664], [203.0, 43114.0], [206.0, 36042.0], [205.0, 36569.25], [207.0, 37441.25], [201.0, 55559.0], [200.0, 56339.0], [209.0, 43103.5], [208.0, 34614.71428571428], [212.0, 43450.0], [215.0, 34694.125], [214.0, 44290.5], [213.0, 43114.0], [211.0, 55334.0], [210.0, 55453.0], [218.0, 36133.333333333336], [217.0, 36057.571428571435], [216.0, 37330.5], [220.0, 35283.625], [222.0, 40928.333333333336], [221.0, 41013.0], [219.0, 38488.5], [223.0, 40031.0], [224.0, 36859.57142857143], [225.0, 36010.99999999999], [226.0, 38943.25], [228.0, 38489.5], [227.0, 38217.6], [231.0, 39500.5], [230.0, 43442.0], [229.0, 44148.5], [234.0, 39655.2], [233.0, 39543.0], [232.0, 42419.5], [235.0, 39423.583333333336], [239.0, 50875.46875], [238.0, 48806.375], [237.0, 47985.6], [236.0, 46396.13333333333], [247.0, 35360.18181818182], [246.0, 27883.021276595744], [245.0, 36053.82978723405], [244.0, 36291.43396226415], [243.0, 38911.80392156863], [242.0, 36770.26315789473], [241.0, 42681.78333333333], [240.0, 38346.50000000001], [248.0, 33880.64583333332], [252.0, 37493.686274509804], [251.0, 41570.28070175438], [255.0, 34987.921568627455], [254.0, 36533.31914893618], [253.0, 39443.84999999999], [250.0, 36949.05555555557], [249.0, 31576.485714285714], [259.0, 29540.81818181818], [261.0, 28357.104166666664], [262.0, 40491.480769230766], [260.0, 34578.51351351351], [263.0, 31583.42222222222], [256.0, 34971.86363636363], [258.0, 40194.30188679245], [257.0, 38874.097560975606], [264.0, 45119.99999999999], [271.0, 29528.33333333333], [270.0, 25346.375], [269.0, 21187.266666666674], [268.0, 36873.666666666664], [265.0, 36133.37037037036], [266.0, 36843.846153846156], [267.0, 36526.733333333315], [272.0, 51146.0], [273.0, 13334.666666666664], [278.0, 53156.0], [277.0, 2067.0], [276.0, 53548.0], [275.0, 27719.0], [274.0, 19249.666666666668], [1.0, 54183.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}, {"data": [[227.99099999999987, 37977.41600000004]], "isOverall": false, "label": "myABFlex Load Test-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 278.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 326.0, "minX": 1.69694286E12, "maxY": 10894.466666666667, "series": [{"data": [[1.69694304E12, 10590.333333333334], [1.6969431E12, 10487.5], [1.69694292E12, 8667.933333333332], [1.69694298E12, 10894.466666666667], [1.69694286E12, 3497.6666666666665], [1.69694316E12, 6150.833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69694304E12, 602.0], [1.6969431E12, 536.0], [1.69694292E12, 592.0], [1.69694298E12, 572.0], [1.69694286E12, 326.0], [1.69694316E12, 536.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69694316E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 23322.239263803673, "minX": 1.69694286E12, "maxY": 53182.919298245644, "series": [{"data": [[1.69694304E12, 38461.38271604942], [1.6969431E12, 37323.516883116885], [1.69694292E12, 32995.61173184355], [1.69694298E12, 37716.16831683172], [1.69694286E12, 23322.239263803673], [1.69694316E12, 53182.919298245644]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69694316E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 23321.625766871173, "minX": 1.69694286E12, "maxY": 53060.11228070176, "series": [{"data": [[1.69694304E12, 37932.328395061726], [1.6969431E12, 36697.15324675325], [1.69694292E12, 32638.826815642453], [1.69694298E12, 37115.32425742576], [1.69694286E12, 23321.625766871173], [1.69694316E12, 53060.11228070176]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69694316E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.7668711656441705, "minX": 1.69694286E12, "maxY": 747.3090909090909, "series": [{"data": [[1.69694304E12, 671.4716049382708], [1.6969431E12, 747.3090909090909], [1.69694292E12, 363.03631284916196], [1.69694298E12, 712.7747524752476], [1.69694286E12, 7.7668711656441705], [1.69694316E12, 319.02105263157904]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69694316E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1416.0, "minX": 1.69694286E12, "maxY": 62670.0, "series": [{"data": [[1.69694304E12, 55487.0], [1.6969431E12, 58069.0], [1.69694292E12, 47935.0], [1.69694298E12, 58325.0], [1.69694286E12, 46888.0], [1.69694316E12, 62670.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69694304E12, 53604.2], [1.6969431E12, 56067.7], [1.69694292E12, 46024.0], [1.69694298E12, 55106.1], [1.69694286E12, 30566.4], [1.69694316E12, 59775.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69694304E12, 55188.4], [1.6969431E12, 57424.47], [1.69694292E12, 47769.439999999995], [1.69694298E12, 57361.88], [1.69694286E12, 46819.96], [1.69694316E12, 62534.8]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69694304E12, 53985.4], [1.6969431E12, 56704.6], [1.69694292E12, 46595.1], [1.69694298E12, 55921.34999999999], [1.69694286E12, 31030.75], [1.69694316E12, 61099.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69694304E12, 44371.0], [1.6969431E12, 45271.0], [1.69694292E12, 29699.0], [1.69694298E12, 46152.0], [1.69694286E12, 1416.0], [1.69694316E12, 48118.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69694304E12, 51313.0], [1.6969431E12, 53171.5], [1.69694292E12, 39895.5], [1.69694298E12, 52859.0], [1.69694286E12, 23121.5], [1.69694316E12, 56681.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69694316E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2054.0, "minX": 1.0, "maxY": 54369.0, "series": [{"data": [[2.0, 49181.0], [8.0, 50571.0], [9.0, 51789.5], [10.0, 52840.0], [11.0, 51116.0], [3.0, 50808.0], [12.0, 50069.0], [13.0, 52729.5], [14.0, 51826.0], [15.0, 51729.0], [1.0, 47329.5], [4.0, 52799.0], [16.0, 52743.0], [17.0, 53229.0], [18.0, 54355.0], [5.0, 50619.0], [6.0, 46718.0], [25.0, 54369.0], [7.0, 51219.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 7840.0], [8.0, 2066.0], [9.0, 2056.0], [10.0, 2055.5], [11.0, 2054.0], [12.0, 2056.0], [13.0, 2060.0], [14.0, 2056.0], [15.0, 2059.0], [16.0, 2054.0], [4.0, 2059.0], [17.0, 2057.0], [18.0, 2067.0], [5.0, 2060.5], [6.0, 2062.5], [7.0, 2065.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 54369.0, "series": [{"data": [[2.0, 49181.0], [8.0, 50571.0], [9.0, 51789.5], [10.0, 52840.0], [11.0, 51116.0], [3.0, 50808.0], [12.0, 50069.0], [13.0, 52729.5], [14.0, 51826.0], [15.0, 51729.0], [1.0, 47329.5], [4.0, 52799.0], [16.0, 52743.0], [17.0, 53229.0], [18.0, 54355.0], [5.0, 50619.0], [6.0, 46718.0], [25.0, 54369.0], [7.0, 51219.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 6757.5], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [4.0, 0.0], [17.0, 0.0], [18.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.69694286E12, "maxY": 6.683333333333334, "series": [{"data": [[1.69694304E12, 6.666666666666667], [1.6969431E12, 6.666666666666667], [1.69694292E12, 6.666666666666667], [1.69694298E12, 6.683333333333334], [1.69694286E12, 6.166666666666667], [1.69694316E12, 0.48333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69694316E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69694286E12, "maxY": 5.016666666666667, "series": [{"data": [[1.69694304E12, 5.016666666666667], [1.6969431E12, 4.466666666666667], [1.69694292E12, 4.933333333333334], [1.69694298E12, 4.766666666666667], [1.69694286E12, 2.7], [1.69694316E12, 4.466666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69694286E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.69694304E12, 1.7333333333333334], [1.6969431E12, 1.95], [1.69694292E12, 1.0333333333333334], [1.69694298E12, 1.9666666666666666], [1.69694316E12, 0.2833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69694316E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69694286E12, "maxY": 5.016666666666667, "series": [{"data": [[1.69694304E12, 5.016666666666667], [1.6969431E12, 4.466666666666667], [1.69694292E12, 4.933333333333334], [1.69694298E12, 4.766666666666667], [1.69694286E12, 2.7], [1.69694316E12, 4.466666666666667]], "isOverall": false, "label": "myABFlex Load Test-success", "isController": false}, {"data": [[1.69694304E12, 1.7333333333333334], [1.6969431E12, 1.95], [1.69694292E12, 1.0333333333333334], [1.69694298E12, 1.9666666666666666], [1.69694286E12, 0.016666666666666666], [1.69694316E12, 0.2833333333333333]], "isOverall": false, "label": "myABFlex Load Test-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69694316E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69694286E12, "maxY": 5.016666666666667, "series": [{"data": [[1.69694304E12, 5.016666666666667], [1.6969431E12, 4.466666666666667], [1.69694292E12, 4.933333333333334], [1.69694298E12, 4.766666666666667], [1.69694286E12, 2.7], [1.69694316E12, 4.466666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69694304E12, 1.7333333333333334], [1.6969431E12, 1.95], [1.69694292E12, 1.0333333333333334], [1.69694298E12, 1.9666666666666666], [1.69694286E12, 0.016666666666666666], [1.69694316E12, 0.2833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69694316E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

